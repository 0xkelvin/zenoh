/// This file attempts to list and document available configuration elements.
/// For a more complete view of the configuration's structure, check out `zenoh/src/config.rs`'s `Config` structure.
/// Note that the values here are correctly typed, but may not be sensible, so copying this file to change only the parts that matter to you is not good practice.
{
  /// Plugins are only loaded if present in the configuration. When starting
  /// Once loaded, they may react to changes in the configuration made through the zenoh instance's adminspace.
  plugins: {
    /// If no `__path__` is given to a plugin, zenohd will automatically search for a shared library matching the plugin's name (here, `libzplugin_rest.so` would be searched for on linux)
    rest: {
      /// Setting this option to true allows zenohd to panic should it detect issues with this plugin. Setting it to false politely asks the plugin not to panic.
      __required__: true, // defaults to false
      http_port: 8000,
    },
    storages: {
      /// When a path is present, automatic search is disabled, and zenohd will instead select the first path which manages to load.
      __path__: [
        "./target/release/libzplugin_storages.so",
        "./target/release/libzplugin_storages.dylib",
      ],
      /// Storages are grouped by backend, which may implement the storage function in various ways.
      backends: {
        /// The memory backend is always available, and stores values in RAM.
        memory: {
          /// Each backend may manage several storages
          storages: {
            /// Each storage must be named
            demo: {
              key_expr: "/demo/memory/**",
            },
          },
        },
        /// An influxdb backend is also available at https://github.com/eclipse-zenoh/zenoh-backend-influxdb
        influxdb: {
          url: "https://myinfluxdb.example",
          db: "example",
          /// Some plugins may need passwords in their configuration.
          /// To avoid leaking them through the adminspace, they may be masked behind a privacy barrier.
          /// any value held at the key "private" will not be shown in the adminspace.
          private: {
            username: "user1",
            password: "pw1",
          },
          storages: {
            influxdemo: {
              key_expr: "/demo/influxdb/**",
              /// This prefix will be stripped of the received keys when storing.
              strip_prefix: "/demo/influxdb/",
            },
          },
        },
        influxdb2: {
          /// A second backend of the same type can be spawned using `__path__`, for examples when different DBs are needed.
          __path__: ["../libzbackend_influxdb.so"],
          private: {
            username: "user2",
            password: "pw2",
          },
          url: "https://localhost:3000",
          db: "localhost-example",
          storages: {
            influxdemo: {
              key_expr: "/demo/influxdb2/**",
              strip_prefix: "/demo/influxdb2/",
            },
          },
        },
      },
    },
  },
  /// Directories where plugins configured by name should be looked for. PLugins configured by __path__ are not subject to lookup
  plugins_search_dirs: [],
  /// The identifier (as hex-string) that zenohd must use. If not set, a random UUIDv4 will be used.
  /// WARNING: this id must be unique in your zenoh network.
  // id: "I like trains",
  /// The node's mode (router, peer or client)
  mode: "router",
  /// Which endpoints to connect to. E.g. tcp/localhost:7447.
  /// By configuring the endpoints, it is possible to tell zenoh which router/peer to connect to at startup.
  connect: {
    endpoints: [
      // "<proto>/<address>"
    ]
  },
  /// Which endpoints to listen on. E.g. tcp/localhost:7447.
  /// By configuring the endpoints, it is possible to tell zenoh which are the endpoints that other routers, 
  /// peers, or client can use to establish a zenoh session.
  listen: {
    endpoints: [
      // "<proto>/<address>"
    ]
  },
  startup: {
    subscribe: ["/demo/subs/**"],
    declare_publications: ["/demo/pubs/**"],
  },
  scouting: {
    /// In client mode, the period dedicated to scouting for a router before failing
    timeout: 3000,
    /// In peer mode, the period dedicated to scouting remote peers before attempting other operations
    delay: 200,
    /// How multicast should behave
    multicast: {
      /// Whether multicast scouting is enabled or not
      enabled: true,
      /// The socket which should be used for multicast scouting
      address: "224.0.0.224:7447",
      /// The network interface which should be used for multicast scouting
      interface: "", // empty string means auto
      /// An autoconnection mask (accepted values are bit-or-like combinations of peer, router and client).
      /// If the configured instance's mode intersects with this field, zenoh will automatically establish a connection with other nodes discovered through this method of scouting.
      autoconnect: "peer|client",
    },
    gossip: {
      /// Whether the link state protocol should be enabled
      enabled: true,
      autoconnect: "",
    },
    /// If set to `false`, peers will never automatically establish sessions between each-other.
    peers_autoconnect: false,
  },
  /// Whether data messages should be timestamped
  add_timestamp: true,
  /// Whether local writes/queries should reach local subscribers/queryables
  local_routing: true,
  transport: {
    shared_memory: true,
    sequence_number_resolution: 268435456,
    qos: false,
    unicast: {
      /// Timeout in milliseconds when opening a link
      accept_timeout: 10000,
      accept_pending: 100,
      max_sessions: 1024,
      max_links: 1,
    },
    multicast: {
      /// Link keep-alive duration in milliseconds
      join_interval: 2500,
      max_sessions: 1024,
    },
    link: {
      batch_size: 65535,
      /// Link lease duration in milliseconds, into = usize_to_cowstr, from = usize_from_str
      lease: 10000,
      /// Link keep-alive duration in milliseconds
      keep_alive: 2500,
      /// Receiving buffer size for each link
      rx_buffer_size: 16777216,
      /// Maximum size of the defragmentation buffer at receiver end.
      /// Fragmented messages that are larger than the configured size will be dropped.
      defrag_buffer_size: 1073741824,
      tls: {
        root_ca_certificate: null,
        server_private_key: null,
        server_certificate: null,
        client_auth: null,
        client_private_key: null,
        client_certificate: null,
      },
    },
    auth: {
      /// The configuration of authentification.
      /// A password implies a username is required.
      usrpwd: {
        user: null,
        password: null,
        /// The path to a file containing the user password dictionary
        dictionary_file: null,
      },
      pubkey: {
        public_key_pem: null,
        private_key_pem: null,
        public_key_file: null,
        private_key_file: null,
        key_size: null,
        known_keys_file: null,
      },
    },
  },
}
